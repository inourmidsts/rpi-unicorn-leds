#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');

if (process.env.NODE_ENV !== 'production') {
  require('dotenv').config()
}

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io').listen(server);

console.log("STARTING SERVER ðŸŒˆ ðŸ¦„ âœ¨");

// TURN OFF auth for now.
// require('socketio-auth')(io, {
//   authenticate: function (socket, data, callback) {
//     if (data.key == process.env.SOCKET_KEY) {
//       return callback(null, true);
//     } else {
//       return callback(new Error("Bad credentials"))
//     }
//   }
// });

var piClient = {};

io.on('connection', function(socket){
  console.log("CLIENT CONNECTED ðŸ’ƒ ", socket.id);

  socket.on('clientConnected', function(){
    console.log('Client is online');
    if (piClient.id && piClient.id !== socket.id) {
      io.emit("piConnected");
    } else {
      io.emit("piDisconnected");
    }
  });

  // let any newly connected client know if pi is connected
  if (piClient.id) {
    io.emit("piConnected");
    console.log("Pi in da house", piClient);
  }

  socket.on('stateChanged', function(state){
    console.log(`StateChanged on server: ${JSON.stringify(state)}`);
    io.emit("updateState", state);
  });

  socket.on('piConnected', function(message){
    console.log('Raspberry Pi is online');
    piClient.id = socket.id;
    io.emit("piConnected");
  });

  socket.on('disconnect', function(){
    console.log('client disconnected ðŸ’©')
    if (socket.id == piClient.id) {
      console.log("Bye Bye ðŸ‘‹ ðŸ‘‹  Pi Client Disconnected", socket.id);

      // clear out piClient if disconnected
      var y = piClient;
      piClient = {};
      console.log('piDisconnected', piClient);
      io.emit("piDisconnected");
    }
    socket.disconnect();
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
